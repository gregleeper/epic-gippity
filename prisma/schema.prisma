// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image          UserImage?
  password       Password?
  roles          Role[]
  sessions       Session[]
  connections    Connection[]
  feedbacks      Feedback[]
  rubrics        Rubric[]
  LessonPlan     LessonPlan[]
  SupportingText SupportingText[]
  Summaries      Summary[]
  UnitPlan       UnitPlan[]
  DOK            DOK[]
  Format         Format[]
  UserRubric     UserRubric[]
  Assignment     Assignment[]
}

model Feedback {
  id               String   @id @default(uuid())
  rubric           String
  requirements     String
  assistantRole    String
  studentResponse  String
  feedbackResponse String
  summary          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  Format           Format[]
}

model Rubric {
  id             String   @id @default(cuid())
  title          String
  gradeLevel     String
  objective      String
  description    String
  pointScale     Int
  customization  String?
  rubricResponse String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  Summary        Summary?
}

model SupportingText {
  id           String      @id @default(cuid())
  prompt       String
  gradeLevel   String
  subject      String
  textResponse String
  lessonPlanId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  LessonPlan   LessonPlan? @relation(fields: [lessonPlanId], references: [id])
}

model LessonPlan {
  id                 String           @id @default(uuid())
  objective          String
  additionalContext  String?
  standards          String?
  gradeLevel         String
  lessonPlanResponse String?
  subject            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  summary            Summary[]
  supportingTexts    SupportingText[]
  userId             String
  user               User             @relation(fields: [userId], references: [id])
}

model UnitPlan {
  id                String    @id @default(uuid())
  topics            String
  additionalContext String?
  standards         String?
  gradeLevel        String
  lengthOfUnit      String
  unitPlanResponse  String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  summary           Summary[]
  userId            String
  user              User      @relation(fields: [userId], references: [id])
}

model DOK {
  id          String    @id @default(uuid())
  gradeLevel  String
  standards   String
  dokResponse String?
  summary     Summary[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Summary {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  summary      String
  model        String // e.g. "rubric" or "lessonPlan"
  instanceId   String // e.g. the id of the rubric or lessonPlan
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  lessonPlanId String?     @unique
  LessonPlan   LessonPlan? @relation(fields: [lessonPlanId], references: [id])
  rubricId     String?     @unique
  Rubric       Rubric?     @relation(fields: [rubricId], references: [id])
  UnitPlan     UnitPlan?   @relation(fields: [unitPlanId], references: [id])
  unitPlanId   String?
  DOK          DOK?        @relation(fields: [dokId], references: [id])
  dokId        String?

  @@unique([model, instanceId])
}

model Format {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  output     String
  object     String
  subObject  String
  instanceId String
  feedbackId String?
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])

  @@unique([object, subObject, instanceId])
}

model UserImage {
  id          String  @id @default(uuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(uuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(uuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(uuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model UserRubric {
  id          Int            @id @default(autoincrement())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  public      Boolean        @default(false)
  name        String
  isPublic    Boolean?       @default(false)
  description String
  objective   String
  gradeLevel  String
  createdAt   DateTime       @default(now())
  rows        RubricRow[]
  columns     RubricColumn[]
  Assignment  Assignment[]
}

model RubricRow {
  id       Int          @id @default(autoincrement())
  rubricId Int
  content  String
  order    Int
  rubric   UserRubric   @relation(fields: [rubricId], references: [id])
  cells    RubricCell[]
}

model RubricColumn {
  id       Int          @id @default(autoincrement())
  rubricId Int
  content  String
  order    Int
  rubric   UserRubric   @relation(fields: [rubricId], references: [id])
  cells    RubricCell[]
}

model RubricCell {
  id       Int          @id @default(autoincrement())
  rowId    Int
  columnId Int
  content  String
  row      RubricRow    @relation(fields: [rowId], references: [id])
  column   RubricColumn @relation(fields: [columnId], references: [id])
}

model Assignment {
  id           String     @id @default(uuid())
  title        String
  description  String
  requirements String
  rubricId     Int
  rubric       UserRubric @relation(fields: [rubricId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
}
